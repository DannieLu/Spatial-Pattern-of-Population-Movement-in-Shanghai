D<-D[!is.na(D),]
!is.na(D)
D<-D.raw[c('longitude','latitude','Join_Count')]
D<-D[!is.na(D),]
View(D)
D<-D.raw[c('longitude','latitude','Join_Count')]
D<-D[D$longitude==0,]
View(D)
D<-D.raw[c('longitude','latitude','Join_Count')]
D.raw<-read.table('fishnetpoint05.txt',sep=',',header = T)
D<-D.raw[c('longitude','latitude','Join_Count')]
D<-D[D$longitude!=0,]
View(D)
plot(D$longitude,D$latitude)
setwd('C:/Users/Dannie/Dropbox/Dissertation/GMSData/R/SpatialAnalysis')
D.raw<-read.table('fishnetpoint05.txt',sep=',',header = T)
View(D.raw)
D<-D.raw[c('long','lat','Join_Count')]
D<-D[D$longitude!=0,]
D.raw<-read.table('fishnetpoint05.txt',sep=',',header = T)
D<-D.raw[c('long','lat','Join_Count')]
View(D)
plot(D$longitude,D$latitude)
summary(D$long)
summary(D$lat)
plot(D$long,D$lat)
D.raw<-read.table('fishnetpoint06.txt',sep=',',header = T)
D<-D.raw[c('long','lat','Join_Count')]# other hour
View(D.raw)
summary(D$Join_Count)
D.raw<-read.table('fishnetpoint06.txt',sep=',',header = T)
D<-D.raw[c('long','lat','freq')]# other hour
summary(D$freq)
D.raw<-read.table('fishnetpoint05.txt',sep=',',header = T)
D<-D.raw[c('long','lat','Join_Count')]# hour 5
summary(D$Join_Count)
D.raw<-read.table('fishnetpoint05.txt',sep=',',header = T)
D<-D.raw[c('long','lat','Join_Count')]# hour 5
names(D)<-c('long','lat','freq')
plot(D$freq)
hist(D$freq)
D.raw<-read.table('fishnetpoint06.txt',sep=',',header = T)
D<-D.raw[c('long','lat','freq')]# other hour
summary(D$long)
summary(D$lat)
summary(D$freq)
plot(D$long,D$lat)
hist(D$freq)
D.raw<-read.table('fishnetpoint05.txt',sep=',',header = T)
D<-D.raw[c('long','lat','Join_Count')]# hour 5
names(D)<-c('long','lat','freq')
View(D.raw)
hist(D$freq)
library(geoR)
library(akima)
library(gstat)
simul.geo <- as.geodata(D)
simul.var <- variog(simul.geo,estimator.type="classical")
simul.modvar <- variog(simul.geo,estimator.type="modulus")# (Hawkins and Cressie,
plot(simul.var)
plot(simul.modvar)
D.raw<-read.table('fishnetpoint06.txt',sep=',',header = T)
D<-D.raw[c('long','lat','freq')]# other hour
summary(D$long)
summary(D$lat)
summary(D$freq)
plot(D$long,D$lat)
hist(D$freq)
simul.geo <- as.geodata(D)
simul.var <- variog(simul.geo,estimator.type="classical")
simul.modvar <- variog(simul.geo,estimator.type="modulus")# (Hawkins and Cressie,
plot(simul.var)
plot(simul.modvar)
D.raw<-read.table('fishnetpoint07.txt',sep=',',header = T)
D<-D.raw[c('long','lat','freq')]# other hour
summary(D$long)
summary(D$lat)
summary(D$freq)
plot(D$long,D$lat)
hist(D$freq)
simul.geo <- as.geodata(D)
simul.var <- variog(simul.geo,estimator.type="classical")
simul.modvar <- variog(simul.geo,estimator.type="modulus")# (Hawkins and Cressie,
plot(simul.var)
plot(simul.modvar)
D.raw<-read.table('fishnetpoint09.txt',sep=',',header = T)
D<-D.raw[c('long','lat','freq')]# other hour
summary(D$long)
summary(D$lat)
summary(D$freq)
plot(D$long,D$lat)
hist(D$freq)
simul.geo <- as.geodata(D)
simul.var <- variog(simul.geo,estimator.type="classical")
simul.modvar <- variog(simul.geo,estimator.type="modulus")# (Hawkins and Cressie,
plot(simul.var)
plot(simul.modvar)
int.scp <- interp(D$long, D$lat, D$freq)
image(int.scp,xlim=range(Data$longitude),ylim=range(Data$latitude))
image(int.scp,xlim=range(D$long),ylim=range(D$lat))
contour(int.scp,add=TRUE)
persp(int.scp,theta=60, phi=30)
library(maps)
map('china')
map('China')
D.raw<-read.table('fishnetpoint09.txt',sep=',',header = T)
D<-D.raw[c('long','lat','freq')]# other hour
summary(D$long)
summary(D$lat)
summary(D$freq)
plot(D$long,D$lat)
hist(D$freq)
# semivariogram
simul.geo <- as.geodata(D)
simul.var <- variog(simul.geo,estimator.type="classical")
simul.modvar <- variog(simul.geo,estimator.type="modulus")# (Hawkins and Cressie,
plot(simul.var)
plot(simul.modvar)
plot(simul.modvar)
simul.modvar
summary(D$freq)
boxplot(D$freq)
simul.geo <- as.geodata(D)
simul.var <- variog(simul.geo,estimator.type="classical")
simul.modvar <- variog(simul.geo,estimator.type="modulus")# (Hawkins and Cressie,
plot(simul.var)
plot(simul.modvar)
mod='spherical'
dir.variog<-variog4(simul.geo, direction = c(0, pi/4, pi/2, 3*pi/4))
plot(dir.variog,xlim=c(0,4),bty='n',cex=0.7)
plot(dir.variog,xlim=c(0,4),bty='n',cex=0.6,bty='n')
spherical.anis.ml.fit <- likfit(simul.geo,cov.model=mod,ini.cov.pars=ini)
print(summary(spherical.anis.ml.fit))
ini<-c(1,1)
spherical.anis.ml.fit <- likfit(simul.geo,cov.model=mod,ini.cov.pars=ini)
print(summary(spherical.anis.ml.fit))
fit.cov.par<-as.numeric(spherical.anis.ml.fit$aniso.pars)
aniso.coords1 <- coords.aniso(coords,aniso.pars=fit.cov.par,reverse=FALSE)
obj.aniso1 <- cbind(aniso.coords1,Datafit$Res)
geo.aniso1 <- as.geodata(obj.aniso1,coords.col=1:2,data.col=3)
trans.var1 <- variog(geo.aniso1,estimator.type="classical")
trans.modvar1 <- variog(geo.aniso1,estimator.type="modulus")
lim<-max(trans.var1$v,trans.modvar1$v)*1.2
plot(trans.var1,pch=20,ylim=c(0,lim))
par(new=T)
plot(trans.modvar1,ylim=c(0,lim),xaxt='n',yaxt='n',col='red',pch=20,xlab='',ylab='')
#  legend('topleft',pch = c(20,20),col=c('black','red'),legend = c('Matheron','Hawkins and Cressie'),cex=0.6,bty='n')
title(paste(mod,'(MLE)'))
lines(spherical.anis.ml.fit,col="blue")
legend('topright',legend = paste('psiA=',round(fit.cov.par[1]*180/pi),sep=''),bty='n',cex=0.8)
par(mfcol=c(1,1))
plot(trans.var1,pch=20,ylim=c(0,lim))
plot(trans.modvar1,ylim=c(0,lim),xaxt='n',yaxt='n',col='red',pch=20,xlab='',ylab='')
fit.nug.cressie.exp <- variofit(simul.var,ini.cov.pars=c(1,2),cov.model="exponential",weights="cressie",fix.kappa = F)
fit.nug.cressie.mat <- variofit(simul.var,ini.cov.pars=c(1,2),cov.model='matern',weights="cressie",fix.kappa = F)
fit.nug.cressie.gau <- variofit(simul.var,ini.cov.pars=c(1,2),cov.model="gaussian",weights="cressie",fix.kappa = F)
fit.nug.cressie.sph <- variofit(simul.var,ini.cov.pars=c(1,2),cov.model="spherical",weights="cressie",fix.kappa = F)
plot(simul.var,main='')
lines(fit.nug.cressie.exp,col='black')
lines(fit.nug.cressie.mat,col='red')
lines(fit.nug.cressie.gau,col='blue')
lines(fit.nug.cressie.sph,col='green')
fit.nug.cressie.exp <- variofit(simul.var,ini.cov.pars=c(1,4),cov.model="exponential",weights="cressie",fix.kappa = F)
fit.nug.cressie.mat <- variofit(simul.var,ini.cov.pars=c(1,4),cov.model='matern',weights="cressie",fix.kappa = F)
fit.nug.cressie.gau <- variofit(simul.var,ini.cov.pars=c(1,4),cov.model="gaussian",weights="cressie",fix.kappa = F)
fit.nug.cressie.sph <- variofit(simul.var,ini.cov.pars=c(1,4),cov.model="spherical",weights="cressie",fix.kappa = F)
plot(simul.var,main='')
lines(fit.nug.cressie.exp,col='black')
lines(fit.nug.cressie.mat,col='red')
lines(fit.nug.cressie.gau,col='blue')
lines(fit.nug.cressie.sph,col='green')
?variofit
fit.nug.cressie.exp <- variofit(simul.var,ini.cov.pars=c(10,0.1),cov.model="exponential",weights="cressie",fix.kappa = F)
fit.nug.cressie.mat <- variofit(simul.var,ini.cov.pars=c(10,0.1),cov.model='matern',weights="cressie",fix.kappa = F)
fit.nug.cressie.gau <- variofit(simul.var,ini.cov.pars=c(10,0.1),cov.model="gaussian",weights="cressie",fix.kappa = F)
fit.nug.cressie.sph <- variofit(simul.var,ini.cov.pars=c(10,0.1),cov.model="spherical",weights="cressie",fix.kappa = F)
plot(simul.var,main='')
lines(fit.nug.cressie.exp,col='black')
lines(fit.nug.cressie.mat,col='red')
lines(fit.nug.cressie.gau,col='blue')
lines(fit.nug.cressie.sph,col='green')
fit.nug.cressie.exp <- variofit(simul.var,ini.cov.pars=c(100,0.1),cov.model="exponential",weights="cressie",fix.kappa = F)
fit.nug.cressie.mat <- variofit(simul.var,ini.cov.pars=c(100,0.1),cov.model='matern',weights="cressie",fix.kappa = F)
fit.nug.cressie.gau <- variofit(simul.var,ini.cov.pars=c(100,0.1),cov.model="gaussian",weights="cressie",fix.kappa = F)
fit.nug.cressie.sph <- variofit(simul.var,ini.cov.pars=c(100,0.1),cov.model="spherical",weights="cressie",fix.kappa = F)
plot(simul.var,main='')
lines(fit.nug.cressie.exp,col='black')
lines(fit.nug.cressie.mat,col='red')
lines(fit.nug.cressie.gau,col='blue')
lines(fit.nug.cressie.sph,col='green')
fit.nug.cressie.exp <- variofit(simul.var,ini.cov.pars=c(100,0.2),cov.model="exponential",weights="cressie",fix.kappa = F)
fit.nug.cressie.mat <- variofit(simul.var,ini.cov.pars=c(100,0.2),cov.model='matern',weights="cressie",fix.kappa = F)
fit.nug.cressie.gau <- variofit(simul.var,ini.cov.pars=c(100,0.2),cov.model="gaussian",weights="cressie",fix.kappa = F)
fit.nug.cressie.sph <- variofit(simul.var,ini.cov.pars=c(100,0.2),cov.model="spherical",weights="cressie",fix.kappa = F)
plot(simul.var,main='')
lines(fit.nug.cressie.exp,col='black')
lines(fit.nug.cressie.mat,col='red')
lines(fit.nug.cressie.gau,col='blue')
lines(fit.nug.cressie.sph,col='green')
fit.nug.cressie.exp <- variofit(simul.var,ini.cov.pars=c(1,0.2),cov.model="exponential",weights="cressie",fix.kappa = F)
fit.nug.cressie.mat <- variofit(simul.var,ini.cov.pars=c(1,0.2),cov.model='matern',weights="cressie",fix.kappa = F)
fit.nug.cressie.gau <- variofit(simul.var,ini.cov.pars=c(1,0.2),cov.model="gaussian",weights="cressie",fix.kappa = F)
fit.nug.cressie.sph <- variofit(simul.var,ini.cov.pars=c(1,0.2),cov.model="spherical",weights="cressie",fix.kappa = F)
plot(simul.var,main='')
lines(fit.nug.cressie.exp,col='black')
lines(fit.nug.cressie.mat,col='red')
lines(fit.nug.cressie.gau,col='blue')
lines(fit.nug.cressie.sph,col='green')
setwd('C:/Users/Dannie/Dropbox/Dissertation/GMSData/R/SpatialAnalysis')
library(geoR)
library(akima)
library(gstat)
D.raw<-read.table('fishnetpoint09.txt',sep=',',header = T)
D<-D.raw[c('long','lat','freq')]# other hour
plot(D$long,D$lat)
boxplot(D$freq)
hist(D$freq,breaks=20,main='',xlab = 'Number of mobile user',ylab = 'Frequency of sites')
lgfreq<-log(D$freq+1)
hist(lgfreq)
D$lgfreq<-lgfreq
# semivariogram
simul.geo <- as.geodata(D[,c(1,2,4)])
simul.var <- variog(simul.geo,estimator.type="classical",breaks=seq(0,0.4,0.01))
simul.modvar <- variog(simul.geo,estimator.type="modulus",breaks=seq(0,0.4,0.01))# (Hawkins and Cressie,
plot(simul.var)
plot(simul.modvar)
# Variogram fit
fit.nug.cressie.exp <- variofit(simul.var,ini.cov.pars=c(10,0.3),cov.model="exponential",weights="cressie",fix.kappa = F)
fit.nug.cressie.mat <- variofit(simul.var,ini.cov.pars=c(10,0.3),cov.model='matern',weights="cressie",fix.kappa = F)
fit.nug.cressie.gau <- variofit(simul.var,ini.cov.pars=c(10,0.3),cov.model="gaussian",weights="cressie",fix.kappa = F)
fit.nug.cressie.sph <- variofit(simul.var,ini.cov.pars=c(10,0.3),cov.model="spherical",weights="cressie",fix.kappa = F)
fit2 <- variofit(simul.var,ini.cov.pars=c(10,0.3),cov.model="cubic",weights="cressie",fix.kappa = F)
plot(simul.var,main='',pch=20)
lines(fit.nug.cressie.exp,col='black')
lines(fit.nug.cressie.mat,col='red')
lines(fit.nug.cressie.gau,col='blue')
lines(fit.nug.cressie.sph,col='green')
lines(fit2,col='orange')
legend('topleft',col = c('black','red','blue','green','orange'),bty='n',lty=1,cex = 0.75,
legend = c('exponential','matern','gaussian','spherical','cubic'))
fit.nug.cressie.exp <- variofit(simul.modvar,ini.cov.pars=c(10,0.3),cov.model="exponential",weights="cressie",fix.kappa = F)
fit.nug.cressie.mat <- variofit(simul.modvar,ini.cov.pars=c(10,0.3),cov.model='matern',weights="cressie",fix.kappa = F)
fit.nug.cressie.gau <- variofit(simul.modvar,ini.cov.pars=c(10,0.3),cov.model="gaussian",weights="cressie",fix.kappa = F)
fit.nug.cressie.sph <- variofit(simul.modvar,ini.cov.pars=c(10,0.3),cov.model="spherical",weights="cressie",fix.kappa = F)
fit2 <- variofit(simul.modvar,ini.cov.pars=c(10,0.3),cov.model="cubic",weights="cressie",fix.kappa = F)
plot(simul.var,main='',pch=20)
lines(fit.nug.cressie.exp,col='black')
lines(fit.nug.cressie.mat,col='red')
lines(fit.nug.cressie.gau,col='blue')
lines(fit.nug.cressie.sph,col='green')
lines(fit2,col='orange')
legend('topleft',col = c('black','red','blue','green','orange'),bty='n',lty=1,cex = 0.75,
legend = c('exponential','matern','gaussian','spherical','cubic'))
plot(simul.modvar,main='',pch=20)
lines(fit.nug.cressie.exp,col='black')
lines(fit.nug.cressie.mat,col='red')
lines(fit.nug.cressie.gau,col='blue')
lines(fit.nug.cressie.sph,col='green')
lines(fit2,col='orange')
legend('topleft',col = c('black','red','blue','green','orange'),bty='n',lty=1,cex = 0.75,
legend = c('exponential','matern','gaussian','spherical','cubic'))
fit.nug.cressie.exp <- variofit(simul.var,ini.cov.pars=c(10,0.3),cov.model="exponential",weights="cressie",fix.kappa = F)
fit.nug.cressie.mat <- variofit(simul.var,ini.cov.pars=c(10,0.3),cov.model='matern',weights="cressie",fix.kappa = F)
fit.nug.cressie.gau <- variofit(simul.var,ini.cov.pars=c(10,0.3),cov.model="gaussian",weights="cressie",fix.kappa = F)
fit.nug.cressie.sph <- variofit(simul.var,ini.cov.pars=c(10,0.3),cov.model="spherical",weights="cressie",fix.kappa = F)
fit2 <- variofit(simul.var,ini.cov.pars=c(10,0.3),cov.model="cubic",weights="cressie",fix.kappa = F)
plot(simul.modvar,main='',pch=20)
lines(fit.nug.cressie.exp,col='black')
lines(fit.nug.cressie.mat,col='red')
lines(fit.nug.cressie.gau,col='blue')
lines(fit.nug.cressie.sph,col='green')
lines(fit2,col='orange')
legend('topleft',col = c('black','red','blue','green','orange'),bty='n',lty=1,cex = 0.75,
legend = c('exponential','matern','gaussian','spherical','cubic'))
plot(simul.var,main='',pch=20)
lines(fit.nug.cressie.exp,col='black')
lines(fit.nug.cressie.mat,col='red')
lines(fit.nug.cressie.gau,col='blue')
lines(fit.nug.cressie.sph,col='green')
lines(fit2,col='orange')
legend('topleft',col = c('black','red','blue','green','orange'),bty='n',lty=1,cex = 0.75,
legend = c('exponential','matern','gaussian','spherical','cubic'))
summary(fit2)
ini=c(10,0.3)
ml.exp <- likfit(simul.var,cov.model="exponential",ini.cov.pars=ini,fix.kappa = F)
ml.mat <- likfit(simul.var,cov.model="matern",ini.cov.pars=ini,fix.kappa = F)
ml.gau <- likfit(simul.var,cov.model="gaussian",ini.cov.pars=ini,fix.kappa = F)
ml.sph <- likfit(simul.var,cov.model="spherical",ini.cov.pars=ini,fix.kappa = F)
ml.cub <- likfit(simul.var,cov.model="cubic",ini.cov.pars=ini,fix.kappa = F)
ml.exp <- likfit(simul.var,cov.model="exponential",ini.cov.pars=ini,fix.kappa = F)
ml.mat <- likfit(simul.var,cov.model="matern",ini.cov.pars=ini,fix.kappa = F)
ml.gau <- likfit(simul.var,cov.model="gaussian",ini.cov.pars=ini,fix.kappa = F)
ml.sph <- likfit(simul.var,cov.model="spherical",ini.cov.pars=ini,fix.kappa = F)
ml.cub <- likfit(simul.var,cov.model="cubic",ini.cov.pars=ini,fix.kappa = F)
simul.var
ml.exp <- likfit(simul.geo,cov.model="exponential",ini.cov.pars=ini,fix.kappa = F)
ml.mat <- likfit(simul.geo,cov.model="matern",ini.cov.pars=ini,fix.kappa = F)
ml.gau <- likfit(simul.geo,cov.model="gaussian",ini.cov.pars=ini,fix.kappa = F)
ml.sph <- likfit(simul.geo,cov.model="spherical",ini.cov.pars=ini,fix.kappa = F)
ml.cub <- likfit(simul.geo,cov.model="cubic",ini.cov.pars=ini,fix.kappa = F)
plot(simul.var,main='',pch=20)
lines(ml.exp,col='black')
lines(ml.mat,col='red')
lines(ml.gau,col='blue')
lines(ml.sph,col='green')
lines(ml.cub,col='orange')
legend('topleft',col = c('black','red','blue','green','orange'),bty='n',lty=1,cex = 0.75,
legend = c('exponential','matern','gaussian','spherical','cubic'))
ml.gau <- likfit(simul.geo,cov.model="gaussian",ini.cov.pars=ini,fix.kappa = F)
ml.gau <- likfit(simul.geo,cov.model="gaussian",ini.cov.pars=c(5,0.3),fix.kappa = F)
ml.gau <- likfit(simul.geo,cov.model="gaussian",ini.cov.pars=c(5,0.2),fix.kappa = F)
ml.gau <- likfit(simul.geo,cov.model="gaussian",ini.cov.pars=c(5,0.2))
summary(fit.nug.cressie.gau )
View(D)
setwd('C:/Users/Dannie/Dropbox/Dissertation/GMSData/R/SpatialAnalysis')
library(geoR)
library(akima)
library(gstat)
D.raw<-read.table('fishnetpoint05.txt',sep=',',header = T)
View(D.raw)
summary(D.raw$Join_Count)
hist(D.raw$Join_Count)
hist(log(D.raw$Join_Count))
D.raw<-read.table('fishnetpoint09.txt',sep=',',header = T)
View(D.raw)
summary(D.raw$Join_Count)
D.raw<-read.table('fishnetpoint05.txt',sep=',',header = T)
D<-D.raw[c('long','lat','Join_Count')]# hour 5
View(D.raw)
setwd('C:/Users/Dannie/Documents/GitHub/SpatialProject')
D.raw<-read.table('fishnetpoint05.txt',sep=',',header = T)
View(D.raw)
D<-D.raw[c('long','lat','freq')]# other hour
View(D)
summary(D$freq)
View(D.raw)
load("//vtti.ad.vt.edu/Data/Users/dlu/Private/Desktop/GitHub/Spatial_Project/intermediate/ws.RData")
compare <- pred.compare(data, gres)
######################################## Loading Libraries ######################################
#library(maps)
library(akima)
library(geoR)
library(xtable)
library(MASS)
#library(ggplot2)
library(dplyr)
#library(gstat)
#library(ncf) # for correlation
library(scales)
comp <- rbind(likefit_s[, 5], likefit_e[, 5], likefit_g[, 5], likefit_c[, 5], likefit_m[, 5],
likefit_s[, 6], likefit_e[, 6], likefit_g[, 6], likefit_c[, 6], likefit_m[, 6])
likefit_m <- lik.fit(gres, Model = 'matern', xmax = 0.15, r = 0.1)
xtable(likefit_m)
save.image("//vtti.ad.vt.edu/Data/Users/dlu/Private/Desktop/GitHub/Spatial_Project/intermediate/ws2.RData")
comp <- rbind(likefit_s[, 5], likefit_e[, 5], likefit_g[, 5], likefit_c[, 5], likefit_m[, 5],
likefit_s[, 6], likefit_e[, 6], likefit_g[, 6], likefit_c[, 6], likefit_m[, 6])
View(comp)
ma <- apply(comp, 1, mean)
comp <- cbind(comp, ma)
rm(ma)
comp <- data.frame(comp)
colnames(comp) <- c(5:9, 'mean')
rownames(comp) <- c('Spherical AIC', 'Exponential AIC', 'Gaussian AIC', 'Cubic AIC', 'Matern AIC',
'Spherical BIC', 'Exponential BIC', 'Gaussian BIC', 'Cubic BIC', 'Matern BIC')
View(comp)
which.min(comp[1:5, 6])
which.min(comp[6:10, 6])
compare <- pred.compare(data, gres)
# 12. Model Prediction
# Compare between four models
pred.compare <- function(D1, D2)
{
uniq.hour <- as.vector(distinct(D1, hour)$hour)
op <- par(no.readonly = TRUE)
par(mfrow = c(2, 2), mar = c(4,3,1,1), mgp = c(1.5, 0.5, 0))
zmax <- 100000
compare <- data.frame()
true <- data.frame()
sph <- data.frame()
expo <- data.frame()
mate <- data.frame()
model <- list(fit1, fit2, fit3, fit4, fit5)
for (i in uniq.hour)
{
D1i <- filter(D1, hour == i)
gD1i <- as.geodata(D1i, coords.col = c('long', 'lat'), data.col = 'freq')
D2i <- filter(D2, hour == i)
gD2i <- as.geodata(D2i, coords.col = c('long', 'lat'), data.col = 'fre')
#loci <- expand.grid(seq(min(gDi$coords[, 1]), max(gDi$coords[, 1]), 0.005),
#                        seq(min(gDi$coords[, 2]),max(gDi$coords[, 2]), 0.005))
int.gdata <- interp(gD1i$coords[, 1], gD1i$coords[, 2], gD1i$data)
loci <- expand.grid(int.gdata$x, int.gdata$y)
# Spherical Semivariogram Prediction Model
simul.var <- variog(gD2i, estimator.type = "modulus")
sill <- max(simul.var$v)*0.9
variofit_s <- variofit(simul.var, ini.cov.pars = c(sill, 0.1), cov.model = 'spherical',
weights = 'cressie')
sph.pred.image <- krige.conv(gD2i, locations = loci,
krige = krige.control(type.krige = "OK", obj.model = variofit_s))
newx <- cbind(1, loci[, 1], loci[, 2], I(loci[, 1]^2), I(loci[, 2]^2), loci[, 1]*loci[, 2])
pred_s <- sph.pred.image$predict + newx %*% coef(model[[i-4]])
# Exponential Likelihood Prediction Image
mlfit_e <- likfit(gD2i, cov.model = 'exponential', ini.cov.pars=c(sill, 0.1))
exp.pred.image <- krige.conv(gD2i, locations = loci,
krige = krige.control(type.krige = "OK", obj.model = mlfit_e))
pred_e <- exp.pred.image$predict + newx %*% coef(model[[i-4]])
# Matern Likelihood Prediction Image
mlfit_m <- likfit(gD2i, cov.model = 'matern', ini.cov.pars=c(sill, 0.1))
matern.pred.image <- krige.conv(gD2i, locations = loci,
krige = krige.control(type.krige = "OK", obj.model = mlfit_m))
pred_m <- matern.pred.image$predict + newx %*% coef(model[[i-4]])
# true image
plot(loci, type="n", xlab = 'True Image', ylab = '')
image(int.gdata, add = T, zlim = c(0, zmax))
contour(int.gdata, add=TRUE)
# semivariogram spherical
plot(loci, type="n", xlab = 'Semivariogram Spherical', ylab = '')
image(sph.pred.image, values = pred_s, add = T, zlim = c(0, zmax))
contour(sph.pred.image, add=TRUE)
# likelihood exponential
plot(loci, type="n", xlab = 'Likelihood Exponential', ylab = '')
image(exp.pred.image, values = pred_e, add = T, zlim = c(0, zmax))
contour(exp.pred.image, add=TRUE)
# likelihood matern
plot(loci, type="n", xlab = 'Likelihood Matern', ylab = '')
image(matern.pred.image, values = pred_m, add = T, zlim = c(0, zmax))
contour(matern.pred.image, add=TRUE)
par(op)
# compare models using residual sum of squares
rss_s <- sum((int.gdata$z - matrix(pred_s, 40, 40))^2)
rss_e <- sum((int.gdata$z - matrix(pred_e, 40, 40))^2)
rss_m <- sum((int.gdata$z - matrix(pred_m, 40, 40))^2)
comp <- c(rss_s, rss_e, rss_m)
compare <- rbind(compare, comp)
# write out predicted values
tru <- cbind(rep(int.gdata$x, 40), rep(int.gdata$y, each = 40), as.vector(int.gdata$z), i)
true <- rbind (true, tru)
sphe <- cbind(rep(int.gdata$x, 40), rep(int.gdata$y, each = 40), pred_s, i)
sph <- rbind (sph, sphe)
expon <- cbind(rep(int.gdata$x, 40), rep(int.gdata$y, each = 40), pred_e, i)
expo <- rbind (expo, expon)
mater <- cbind(rep(int.gdata$x, 40), rep(int.gdata$y, each = 40), pred_m, i)
mate <- rbind (mate, mater)
}
colnames(compare) <- c('Spherical', 'Exponential', 'Matern')
rownames(compare) <- uniq.hour
colnames(true) <- c('x', 'y', 'value', 'hour')
colnames(sph) <- c('x', 'y', 'value', 'hour')
colnames(expo) <- c('x', 'y', 'value', 'hour')
colnames(mate) <- c('x', 'y', 'value', 'hour')
write.csv(true, file = 'Spatial_Project/intermediate/true.csv')
write.csv(sph, file = 'Spatial_Project/intermediate/spherical.csv')
write.csv(expo, file = 'Spatial_Project/intermediate/exponential.csv')
write.csv(mate, file = 'Spatial_Project/intermediate/matern.csv')
return(compare)
}
# Compare between time
pred.semi.combine <- function(D1, D2){
uniq.hour <- as.vector(distinct(D1, hour)$hour)
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1))
model <- list(fit1, fit2, fit3, fit4, fit5)
for (i in uniq.hour)
{
D1i <- filter(D1, hour == i)
gD1i <- as.geodata(D1i, coords.col = c('long', 'lat'), data.col = 'freq')
D2i <- filter(D2, hour == i)
gD2i <- as.geodata(D2i, coords.col = c('long', 'lat'), data.col = 'fre')
int.gdata <- interp(gD1i$coords[, 1], gD1i$coords[, 2], gD1i$data)
loci <- expand.grid(int.gdata$x, int.gdata$y)
# Spherical Semivariogram Prediction Model
simul.var <- variog(gD2i, estimator.type = "modulus")
sill <- max(simul.var$v)*0.9
variofit_s <- variofit(simul.var, ini.cov.pars = c(sill, 0.1), cov.model = 'spherical',
weights = 'cressie')
sph.pred.image <- krige.conv(gD2i, locations = loci,
krige = krige.control(type.krige = "OK", obj.model = variofit_s))
newx <- cbind(1, loci[, 1], loci[, 2], I(loci[, 1]^2), I(loci[, 2]^2), loci[, 1]*loci[, 2])
pred_s <- sph.pred.image$predict + newx %*% coef(model[[i-4]])
plot(loci, type="n", xlab = paste(i,': 00 ~',i+1,': 00 am'), ylab = '')
image(sph.pred.image, values = pred_s, add = T)
contour(sph.pred.image, add=TRUE)
}
par(mfcol=c(1, 1))
}
pred.lik.combine <- function(D1, D2)
{
uniq.hour <- as.vector(distinct(D1, hour)$hour)
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1))
model <- list(fit1, fit2, fit3, fit4, fit5)
for (i in uniq.hour)
{
D1i <- filter(D1, hour == i)
gD1i <- as.geodata(D1i, coords.col = c('long', 'lat'), data.col = 'freq')
D2i <- filter(D2, hour == i)
gD2i <- as.geodata(D2i, coords.col = c('long', 'lat'), data.col = 'fre')
int.gdata <- interp(gD1i$coords[, 1], gD1i$coords[, 2], gD1i$data)
loci <- expand.grid(int.gdata$x, int.gdata$y)
# Exponential Likelihood Prediction Image
simul.var <- variog(gD2i, estimator.type = "modulus")
sill <- max(simul.var$v)*0.9
mlfit_e <- likfit(gD2i, cov.model = 'exponential', ini.cov.pars=c(sill, 0.1))
exp.pred.image <- krige.conv(gD2i, locations = loci,
krige = krige.control(type.krige = "OK", obj.model = mlfit_e))
newx <- cbind(1, loci[, 1], loci[, 2], I(loci[, 1]^2), I(loci[, 2]^2), loci[, 1]*loci[, 2])
pred_e <- exp.pred.image$predict + newx %*% coef(model[[i-4]])
plot(loci, type="n", xlab = paste(i,': 00 ~',i+1,': 00 am'), ylab = '')
image(exp.pred.image, values = pred_e, add = T)
contour(exp.pred.image, add=TRUE)
}
par(mfcol=c(1, 1))
}
compare <- pred.compare(data, gres)
